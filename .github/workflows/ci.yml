name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: '3.9'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint mypy bandit safety
        pip install -r requirements_ci.txt
        
    - name: Run Black (code formatting check)
      run: |
        black --check --diff .
        
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff .
        
    - name: Run flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
        
    - name: Run pylint
      run: |
        pylint megatron/ --rcfile=.pylintrc --output-format=text
        
    - name: Run mypy (type checking)
      run: |
        mypy megatron/ --config-file=mypy.ini
        
    - name: Run bandit (security linting)
      run: |
        bandit -r megatron/ -f json -o bandit-report.json || true
        bandit -r megatron/ -f txt -o bandit-report.txt || true

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_ci.txt
        pip install -e .
        
    - name: Run unit tests
      run: |
        pytest tests/unit_tests/ -v --cov=megatron --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_ci.txt
        pip install -e .
        
    - name: Run integration tests
      run: |
        pytest tests/functional_tests/ -v --timeout=300

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit trivy-python-plugin
        
    - name: Run safety check (vulnerability scanning)
      run: |
        safety check --json --output safety-report.json || true
        safety check --full-report || true
        
    - name: Run bandit security scan
      run: |
        bandit -r megatron/ -f json -o bandit-report.json || true
        bandit -r megatron/ -f txt -o bandit-report.txt || true
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build CI Development Docker image
      run: |
        docker build -f Dockerfile.ci.dev -t megatron-ci-dev:test .
        
    - name: Build CI LTS Docker image
      run: |
        docker build -f Dockerfile.ci.lts -t megatron-ci-lts:test .
        
    - name: Build Linting Docker image
      run: |
        docker build -f Dockerfile.linting -t megatron-linting:test .
        
    - name: Test Docker images
      run: |
        # Test that images can run basic Python commands
        docker run --rm megatron-ci-dev:test python -c "import megatron; print('Megatron import successful')" || true
        docker run --rm megatron-ci-lts:test python -c "import megatron; print('Megatron import successful')" || true
        
    - name: Run Trivy vulnerability scanner on Docker images
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'megatron-ci-dev:test'
        format: 'sarif'
        output: 'trivy-docker-results.sarif'
        
    - name: Upload Docker scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-docker-results.sarif'

  # Dependency Management
  dependencies:
    name: Dependency Management
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependency check tools
      run: |
        python -m pip install --upgrade pip
        pip install pipdeptree pip-check-reqs
        
    - name: Check for unused dependencies
      run: |
        pip-check-reqs requirements_ci.txt || true
        pip-check-reqs requirements_mlm.txt || true
        
    - name: Generate dependency tree
      run: |
        pip install -e .
        pipdeptree --warn silence > dependency-tree.txt
        
    - name: Upload dependency tree as artifact
      uses: actions/upload-artifact@v3
      with:
        name: dependency-tree
        path: dependency-tree.txt

  # Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install -r requirements_ci.txt
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Performance Tests (Basic)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_ci.txt
        pip install -e .
        pip install pytest-benchmark memory-profiler psutil
        
    - name: Run basic performance tests
      run: |
        # Run tests with benchmarking if available
        pytest tests/unit_tests/ -v --benchmark-only --benchmark-skip || echo "No benchmark tests found"
        
    - name: Memory usage check
      run: |
        python -c "
        import sys
        import megatron
        print(f'Megatron import successful, Python version: {sys.version}')
        print(f'Megatron version: {megatron.__version__ if hasattr(megatron, \"__version__\") else \"Unknown\"}')
        "

  # Documentation Check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        
    - name: Check documentation build
      run: |
        # Check if docs directory exists and can be built
        if [ -d "docs" ]; then
          cd docs
          make html || echo "Documentation build failed but continuing..."
        else
          echo "No docs directory found"
        fi
        
    - name: Check README
      run: |
        # Basic check that README exists and is readable
        if [ -f "README.md" ]; then
          echo "README.md exists and is readable"
          head -20 README.md
        else
          echo "README.md not found"
          exit 1
        fi

  # Final Status Check
  status:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security, docker, dependencies, build, performance, docs]
    if: always()
    
    steps:
    - name: Check CI Status
      run: |
        echo "CI Pipeline completed!"
        echo "Jobs status:"
        echo "- Lint: ${{ needs.lint.result }}"
        echo "- Unit Tests: ${{ needs.unit-tests.result }}"
        echo "- Integration Tests: ${{ needs.integration-tests.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Docker: ${{ needs.docker.result }}"
        echo "- Dependencies: ${{ needs.dependencies.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Performance: ${{ needs.performance.result }}"
        echo "- Documentation: ${{ needs.docs.result }}"
        
        # Fail if any required job failed
        if [[ "${{ needs.lint.result }}" == "failure" ]] || \
           [[ "${{ needs.unit-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.security.result }}" == "failure" ]]; then
          echo "Critical jobs failed. CI failed."
          exit 1
        fi
        
        echo "All critical jobs passed!" 